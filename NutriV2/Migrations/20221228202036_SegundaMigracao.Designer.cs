// <auto-generated />
using System;
using Data.NutriDbContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace NutriV2.Migrations
{
    [DbContext(typeof(NutriDbContext))]
    [Migration("20221228202036_SegundaMigracao")]
    partial class SegundaMigracao
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("NutriV2.Domain.Agenda", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("Data")
                        .HasColumnType("DATE");

                    b.Property<string>("Horario")
                        .IsRequired()
                        .HasColumnType("varchar(5)");

                    b.Property<int>("PacienteId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("INT");

                    b.HasKey("Id");

                    b.HasIndex("PacienteId");

                    b.ToTable("AGENDA_PACIENTE");
                });

            modelBuilder.Entity("NutriV2.Domain.Alimento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<decimal?>("Calorias")
                        .HasColumnType("DECIMAL(10,2)");

                    b.Property<string>("Nome")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("Alimentos");
                });

            modelBuilder.Entity("NutriV2.Domain.Anminese", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("PacienteId")
                        .HasColumnType("int");

                    b.Property<int?>("PacienteId1")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PacienteId1");

                    b.ToTable("ANMINESE");
                });

            modelBuilder.Entity("NutriV2.Domain.AvaliacaoFisica", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<decimal?>("CircAbdominal")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal?>("CircBracoDireito")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal?>("CircBracoEsquerdo")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal?>("CircCintura")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal?>("CircCoxaEsquerda")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal?>("CircCoxadireita")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal?>("CircPanturrilhaDireita")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal?>("CircPanturrilhaEsquerda")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal?>("CircPeito")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal?>("CircQuadril")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal?>("DCAbdominal")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal?>("DCAxilar")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal?>("DCCoxa")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal?>("DCEscapular")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal?>("DCPeitoral")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal?>("DCSupraIliaca")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal?>("DCTriceps")
                        .HasColumnType("decimal(65,30)");

                    b.Property<DateTime>("DataAvaliacao")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("NumAvaliacao")
                        .HasColumnType("int");

                    b.Property<int>("PacienteId")
                        .HasColumnType("int");

                    b.Property<decimal?>("Peso")
                        .HasColumnType("decimal(65,30)");

                    b.HasKey("Id");

                    b.HasIndex("PacienteId");

                    b.ToTable("AvaliacaoFisica");
                });

            modelBuilder.Entity("NutriV2.Domain.Consulta", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AvaliacaoId")
                        .HasColumnType("int");

                    b.Property<int>("PacienteId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AvaliacaoId");

                    b.HasIndex("PacienteId");

                    b.ToTable("Consulta");
                });

            modelBuilder.Entity("NutriV2.Domain.Formacao", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Nome")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("NutricionistaId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("NutricionistaId");

                    b.ToTable("Formacoes");
                });

            modelBuilder.Entity("NutriV2.Domain.Nutricionista", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CPF")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("CRN")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Email")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("Nascimento")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Nome")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int?>("Sexo")
                        .HasColumnType("int");

                    b.Property<string>("Telefone")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int?>("TipoDeContatoTelefone")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Nutricionistas");
                });

            modelBuilder.Entity("NutriV2.Domain.Paciente", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AnmineseId")
                        .HasColumnType("int");

                    b.Property<string>("CPF")
                        .HasColumnType("VARCHAR(11)");

                    b.Property<string>("Email")
                        .HasColumnType("VARCHAR(40)");

                    b.Property<DateTime>("Nascimento")
                        .HasColumnType("DATE");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("VARCHAR(60)");

                    b.Property<int>("Sexo")
                        .HasColumnType("INT");

                    b.Property<string>("Telefone")
                        .HasColumnType("VARCHAR(11)");

                    b.Property<int?>("TipoDeContatoTelefone")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("PACIENTES");
                });

            modelBuilder.Entity("NutriV2.Domain.Pagamento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("ConsultaId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Data")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("DataVencimento")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("PacienteId")
                        .HasColumnType("int");

                    b.Property<int>("TipoDePagamento")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PacienteId");

                    b.ToTable("Pagamentos");
                });

            modelBuilder.Entity("NutriV2.Domain.TipoMedida", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("NomeTipoMedida")
                        .HasColumnType("VARCHAR(40)");

                    b.HasKey("Id");

                    b.ToTable("TipoMedidas");
                });

            modelBuilder.Entity("NutriV2.Domain.Agenda", b =>
                {
                    b.HasOne("NutriV2.Domain.Paciente", "Paciente")
                        .WithMany("HorariosAgendados")
                        .HasForeignKey("PacienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NutriV2.Domain.Anminese", b =>
                {
                    b.HasOne("NutriV2.Domain.Paciente", "Paciente")
                        .WithMany()
                        .HasForeignKey("PacienteId1");
                });

            modelBuilder.Entity("NutriV2.Domain.AvaliacaoFisica", b =>
                {
                    b.HasOne("NutriV2.Domain.Paciente", "Paciente")
                        .WithMany("Avaliacoes")
                        .HasForeignKey("PacienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NutriV2.Domain.Consulta", b =>
                {
                    b.HasOne("NutriV2.Domain.AvaliacaoFisica", "Avaliacao")
                        .WithMany()
                        .HasForeignKey("AvaliacaoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NutriV2.Domain.Paciente", "Paciente")
                        .WithMany("Consultas")
                        .HasForeignKey("PacienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NutriV2.Domain.Formacao", b =>
                {
                    b.HasOne("NutriV2.Domain.Nutricionista", "Nutricionista")
                        .WithMany("Formacoes")
                        .HasForeignKey("NutricionistaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NutriV2.Domain.Pagamento", b =>
                {
                    b.HasOne("NutriV2.Domain.Paciente", "Paciente")
                        .WithMany("Pagamentos")
                        .HasForeignKey("PacienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
